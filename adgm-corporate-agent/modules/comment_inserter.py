from docx import Document
from docx.shared import RGBColor
from typing import List, Dict
import os

class CommentInserter:
    def __init__(self):
        pass
    
    def add_comments_to_document(self, file_path: str, red_flags: List[Dict], output_path: str):
        """Add inline comments to document"""
        file_extension = os.path.splitext(file_path)[1].lower()
        
        if file_extension == '.docx':
            return self._add_comments_to_docx(file_path, red_flags, output_path)
        elif file_extension == '.pdf':
            return self._create_pdf_review_report(file_path, red_flags, output_path)
        else:
            return None
    
    def _add_comments_to_docx(self, file_path: str, red_flags: List[Dict], output_path: str):
        """Add inline comments to DOCX file"""
        try:
            doc = Document(file_path)
            
            # Add a header comment
            if red_flags:
                header_paragraph = doc.paragraphs[0] if doc.paragraphs else doc.add_paragraph()
                header_run = header_paragraph.add_run(f"\n[ADGM CORPORATE AGENT REVIEW - {len(red_flags)} ISSUE(S) FOUND]\n")
                header_run.font.color.rgb = RGBColor(255, 0, 0)
                header_run.bold = True
            
            # Add comments for each red flag
            for i, flag in enumerate(red_flags, 1):
                comment_paragraph = doc.add_paragraph()
                comment_text = f"ISSUE #{i} - {flag.get('severity', 'MEDIUM').upper()}: {flag.get('message', 'No message')}"
                if flag.get('suggestion'):
                    comment_text += f"\nSUGGESTION: {flag['suggestion']}"
                
                comment_run = comment_paragraph.add_run(comment_text)
                comment_run.font.color.rgb = RGBColor(255, 0, 0)
                comment_run.italic = True
                
                comment_paragraph.add_run("\n" + "="*50 + "\n")
            
            # Save modified document
            doc.save(output_path)
            return output_path
            
        except Exception as e:
            print(f"Error adding comments to DOCX: {e}")
            return None
    
    def _create_pdf_review_report(self, file_path: str, red_flags: List[Dict], output_path: str):
        """Create a separate review report for PDF files"""
        try:
            # Create a new Word document with the review
            doc = Document()
            
            # Add title
            title = doc.add_heading(f'ADGM CORPORATE AGENT REVIEW REPORT', 0)
            
            # Add source file info
            doc.add_paragraph(f"Original File: {os.path.basename(file_path)}")
            doc.add_paragraph(f"File Type: PDF Document")
            doc.add_paragraph(f"Issues Found: {len(red_flags)}")
            doc.add_paragraph("="*60)
            
            if red_flags:
                doc.add_heading('Issues Identified:', level=1)
                
                for i, flag in enumerate(red_flags, 1):
                    # Issue header
                    issue_para = doc.add_paragraph()
                    issue_run = issue_para.add_run(f"ISSUE #{i} - {flag.get('severity', 'MEDIUM').upper()}")
                    issue_run.bold = True
                    issue_run.font.color.rgb = RGBColor(255, 0, 0)
                    
                    # Issue details
                    doc.add_paragraph(f"Type: {flag.get('type', 'Unknown')}")
                    doc.add_paragraph(f"Message: {flag.get('message', 'No message')}")
                    
                    if flag.get('suggestion'):
                        suggestion_para = doc.add_paragraph()
                        suggestion_run = suggestion_para.add_run(f"Suggestion: {flag['suggestion']}")
                        suggestion_run.italic = True
                        suggestion_run.font.color.rgb = RGBColor(0, 100, 0)
                    
                    doc.add_paragraph("-" * 40)
            else:
                doc.add_paragraph("âœ… No major issues detected in this document.")
            
            # Add footer
            doc.add_paragraph("\n" + "="*60)
            doc.add_paragraph("Generated by ADGM Corporate Agent")
            
            # Save the review document
            doc.save(output_path)
            return output_path
            
        except Exception as e:
            print(f"Error creating PDF review report: {e}")
            return None
